/* 14-2. queryDSL을 위한 dependency를 받기 위해서 buildscript를 적어준다 */
buildscript {
	dependencies {
		classpath("gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:1.0.10")
	}
}

plugins {
	id 'org.springframework.boot' version '2.3.6.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	id 'war'
}

/* 14-3. queryDSL plugin apply */
apply plugin: "com.ewerk.gradle.plugins.querydsl"

group = 'com.shopJpa'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	
	/* 1. web */
	implementation 'org.springframework.boot:spring-boot-starter-web'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	
	/* 2. mybatis */
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.3'
	
	/* 3. lombok */
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	
	/* 4. JPA */
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	
	/* 5. MariaDB */
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client' 
	
	/* 6. JDBC */
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	
	/* 7. thymeleaf 1 */
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	
	/* 8. thymeleaf 2 : devtools. -> view 파일 재시작 안하고 새로고침으로도 수정내용 반영하고 싶을 때 추가, jsp랑은 다름. */
	implementation 'org.springframework.boot:spring-boot-devtools'
	
	// 9. JUnit5 외부 라이브러리로 로깅 하는 법(현재 1.6.2 버전이 최신)
	implementation("com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.6.2")
	
	// 10. 아래 의존성 주석 처리
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
	//	exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	
	// 11. jUnit5 버전과 4버전 같이 사용하기 위해 아래 의존성 추가, 참고로 실행 시 junit에 오류가 뜨긴 하는데 실행은 됨, 무시하자
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.0' 
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.1.0' 
	testCompileOnly 'junit:junit:4.12' 
	testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.1.0'
	
	// 12. validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	
	// 13. 엔티티가 지연 로딩인 경우 하이버네이트에서는 json 관련 라이브러리에게 아무것도 하지 말라고 지시를 내려줄 수 있는데 그 기능을 구현하기 위한 의존성
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-hibernate5'
	
	// 14-1. queryDSL을 위한 dependency
	implementation 'com.querydsl:querydsl-jpa'
	implementation 'com.querydsl:querydsl-apt'
	
	// jsp 사용을 위한 dependency - 사용 안할 땐 주석
//	implementation 'javax.servlet:jstl'
//	implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
	
	
	
}

test {
	useJUnitPlatform()
}

/* 14-4. querydsl -> generated 된 q파일들이 저장될 위치 지정 */
def querydslDir = 'src/main/generated'

querydsl {
	library = "com.querydsl:querydsl-apt"
	jpa = true
	querydslSourcesDir = querydslDir
}

sourceSets {
	main {
		java {
			srcDirs = ['src/main/java', querydslDir]
		}
	}
}

compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}

configurations {
	querydsl.extendsFrom compileClasspath
}

/* 14-5. gradle represh를 해준뒤 그 다음 단계에 인텔리제이가 아닌 이클립스로 할 경우는 이렇게 해야한다.
	(1) cmd 창을 켜서 프로젝트가 저장되어 있는 폴더 경로로 들어간다. -> 여기서는 D:\workspace(jpa)\shopJpa
	(2) .\gradlew build를 실행
	(3) (1),(2)가 아닌 다른 방법은 gradle Tasks에서 build -> Run Gradle Task
	(3) main 밑에 generated 폴더가 생긴다.

*/

