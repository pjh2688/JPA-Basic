1. URI[Uniform Resource Identifier]

-------------------URI(Resource Identifer)-----------------
|    ------------------------         ------------------------  |
|    |         URL            |         |          URN          |  |
|    | (Resource Locator) |         | (Resource Name)   |  |
|    ------------------------         ------------------------  |                                              
--------------------------------------------------------------

2. URI[Uniform Resource Identifier] 분석
(1) Uniform : 리소스를 식별하는 통일된 방식.(농구 팀 유니폼과 유사)
(2) Resource : 자원, URI로 식별할 수 있는 모든 것(제한 없음)
(3) Identifier : 다른 항목들과 구분하기 위해 필요한 정보.
(4) URL - Locator : 리소스가 있는 위치를 지정.
(5) URN - Name : 리소스에 이름을 부여. ex) urn:isbn:8960777331 -> 어떤 책의 isbn 번호는 8960777331이다.
(6) URN 이름만으로는 실제 리소스를 찾을 수 있는 방법이 보편화 되지 않음.
(7) 통상적으로 URI라고 하면 URL을 지칭. 
(8) 위치는 변할 수 있지만, 이름은 변하지 않는다.

3. URL 분석해보기 예제 -> "https://www.google.com/search?q=hello&hl=ko"
 <scheme://[userinfo@]host[:port][/path][?query][#fragment]>
  ex) https://www.google.com:443/search?q=hello&hl=ko

(1) URL - scheme
 - 주로 프로토콜 사용
 - 프로토콜(protocol) : 어떤 방식으로 자원에 접근할 것인가 약속한 규칙. ex) http, https, ftp 등등
 - http는 80 포트, https는 443 포트를 주로 사용, 포트 번호는 생략 가능.
 - https 는 http에 보안 추가(HTTP Secure).

(2) URL - userinfo
 - URL에 사용자 정보를 포함해서 인증.
 - 거의  사용하지 않음. 

(3) URL - host
 - 호스트명
 - 도메인명 또는 IP 주소를 직접 사용할 수 있음.

(4) URL - port
 - 접속 포트(PORT) 번호
 - 일반적으로 생략, 생략시 http는 80, https는 443.

(5) URL - path
 - 리소스가 위치하고 있는 경로(path).
 - 계층적 구조. ex) /home/file1.jpg , /members, /members/100, /items/iphone12.

(6) URL - query
 - key = value 형태
 - ?로 시작, &로 파라미터 추가 가능. ex) /home?keyA=valueA&keyB=valueB.
 - query parameter, query string 등으로 불리고 웹서버에서 제공하는 파라미터이며 모두 문자 형태이다.

(7) URL - fragment
 - fragment
 - html 내부 북마크 등에 사용
 - 서버로 전송하는 정보가 아니다.
 ex) https://www.google.com:443/search?q=hello&hl=ko#Adele-hello

4. HTTP[HyperText Transfer Protocol]
 - HTML, TEXT.
 - image, 음성, 영상, 파일.
 - JSON, XML (API).
 - 거의 모든 형태의 데이터 전송 가능.
 - 서버간에 데이터를 주고 받을 때 대부분 HTTP를 사용.
 
5. HTTP의 역사
 - 1991년 : HTTP/0.9, GET 메서드만 지원, HTTP 헤더 X.
 - 1996년 : HTTP/1.0, 메서드, 헤더 추가.
 - 1997년 : HTTP/1.1, 가장 많이 사용, 우리에게 가장 중요한 버전(RFC2068).
 - 1999년 : RFC2616.
 - 2014년 : RFC7230~7236.
 - 2015년 : HTTP/2.0, 성능 개선.
 - 2015 이후 ~ : HTTP/3.0, TCP 대신에 UDP 사용, 성능 개선.

6. 기반 프로토콜
 - TCP[Transmission Control Protocol] : HTTP/1.1, HTTP/2.0
 - UDP[User Datagram Protocol] : HTTP/3.0
 - 현재 HTTP/1.1를 주로 사용하고 HTTP/2.0, HTTP/3.0도 점점 증가하는 추세. 

7. HTTP의 특징
 (1) 클라이언트/서버 구조로 동작.
 (2) 무상태 프로토콜(stateless), 비연결성(connectionless).
 (3) HTTP 메시지로 통신.
 (4) 단순하고 확장이 가능.

(1) 클라이언트/서버 구조로 동작
 - Request, Response 구조.
 - 클라이언트는 서버에 요청을 보내고 응답을 기다린다.
 - 서버가 요청에 대한 결과를 만들어서 응답한다.

(2) 무상태 프로토콜 - 스테이트리스(Stateless)
 - 서버가 클라이언트의 상태를 보존하지 않는다.
 - 장점 : 서버 확장성이 높아짐(스케일 아웃)
 - 단점 : 클라이언트가 추가 데이터를 전송해줘야 함.
 - Stateful(상태 유지 O), Stateless(상태 유지 X)

*스케일 아웃(scale out) : 서버를 늘리는 작업, 수평 확장.

*Stateless 설계 시 실무에서의 한계점.
 - 모든 것을 무상태로 설계 할 수 있는 경우도 있고 없는 경우도 있다.
 - 무상태 ex) 로그인이 필요 없는 단순한 서비스 소개 화면
 - 상태 유지 ex) 로그인
 - 로그인한 사용자의 경우 로그인 했다는 상태를 서버에 유지해야 한다,
 - 일반적으로 브라우저 쿠키와 서버 세션 등을 사용하여 상태를 유지한다.
 - 상태 유지는 최소한만 사용하는걸 원칙으로 한다.
 - 데이터를 너무 많이 보내게 된다.

8. 비연결성(connectionless)
 - HTTP는 기본적으로 서버와 클라이언트 간에 연결을 유지하지 않는 모델.
 - 일반적으로 초 단위의 이하의 빠른 속도로 응답이 가능.
 - 1시간 동안 수천명이 서비스를 사용해도 실제 서버에서 동시에 처리하는 요청은 수십개 이하로 매우 작음.
 ex) 한 웹 브라우저에서 각 사용자들이 연속해서 계속 검색 버튼을 동시에 누르지는 않는다.
 - 서버 자원을 매우 효율적으로 사용할 수 있음.

<비 연결성 모델의 한계와 극복>
 - 매번 TCP/IP 연결을 새로 맺어야 함 -> 3 way handshake 시간 추가.
 - 웹 브라우저로 사이트를 요청하면 HTML 뿐만 아니라 자바스크립트, css, 추가 이미지 등등 수 많은 자원이 함께 다운로드된다.
 - 지금은 HTTP 지속 연결(Persistent Connections)로 문제 해결.
 - HTTP/2.0, HTTP/3.0에서는 더 많이 최적화 됨.

* 스테이트리스(stateless)를 기억하자 - 서버 개발자들이 어려워하는 업무.
 - 정말 같은 시간에 딱 맞추어 발생하는 대용량 트래픽.
 ex) 선착순 이벤트, 명절 KTX 예약, 학과 수업 등록, 저녁 6시 선착순 1000명 치킨 할인 이벤트 -> 수만명 동시 요청 등.

9. HTTP[HyperText Transfer Protocol] 메시지
 (1) 시작 라인 -> 요청 메시지
   - start-line = request-line / status-line
   - request-line = method SP(공백) request-target SP HTTP-version CRLF(엔터)
 (2) 시작 라인 -> 요청 메시지 -> HTTP 메서드 : 서버가 수행해야 할 동작을 지정.
   - GET : 조회
   - POST : 요청 내역 처리
   - PUT : 
   - DELETE : 삭제
 (3) 시작 라인 -> 요청 메시지 -> 요청 대상
   - /search?q=hello&hl=ko
   - absolute-path[?query] -> 절대경로?쿼리
   - 절대경로란 "/"로 시작하는 경로
   * 참고 : *, http://...?x=y와 같이 다른 유형의 경로지정 방법도 있다.
 (4) 시작 라인 -> 요청 메시지 -> HTTP Version

 (5) 시작 라인 -> 응답 메시지 
  - start-line = request-line / status-line
  - status-line = HTTP-version SP status-code SP reason-phrase CRLF
  - HTTP 버전
  - HTTP 상태 코드 : 요청 성공, 실패를 나타냄
   -> 200 : 성공
   -> 400 : 클라이언트 요청 오류
   -> 500 : 서버 내부 오류
  - 이유 문구 : 사람이 이해할 수 있는 짧은 상태 코드 설명 글.

 (6) HTTP 헤더
  - header-field = field-name ":" OWS field-vlue OWS (OWS : 띄어쓰기 허용)
  - field-name은 대소문자 구문 없음, 띄어쓰기 허용 X

 (7) HTTP 헤더 용도
  - HTTP 전송에 필요한 모든 부가정보
  ex) 메시지 바디의 내용, 메시지 바디의 크기, 압축, 인증, 요청 클라이언트(브라우저) 정보, 서버 애플리케이션 정보, 캐시 관리 정보 등등
  - 표준 헤더가 너무 많음
  - 필요시 임의의 헤더 추가 가능.

 (8) HTTP 메시지 바디 용도
  - 실제 전송할 데이터
  - HTML 문서, 이미지, 영상, JSON 등등 byte로 표현할 수 있는 모든 데이터 전송 가능.

 (9) 단순하고 확장 가능.
  - HTTP는 단순하다.
  - HTTP 메시지 구조도 매우 단순하다.
  - 크게 성공하는 표준 기술은 단순하지만 확장 가능한 기술이다.