# JDBC Connection url for the database(postgresql)
spring.datasource.driver-class-name=org.postgresql.Driver

# url 뒤에 postgres라고 적어두면 기본 생성되는 public database 사용한다는 말
spring.datasource.url=jdbc:postgresql://127.0.0.1:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=1234

# MYBATIS
mybatis.mapper-locations=classpath:mybatis/mapper/**/**.xml

# JPA[영속성 컨텍스트 설정] -> spring.io에서 springboot 해당 버전(2.3.3) Reference Doc 들어가서 확인
# https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties

# create, create-drop, validate, update, none
spring.jpa.hibernate.ddl-auto=update

# DDL 생성시 데이터베이스고유의 기능을 사용하는지에 대한 유무
spring.jpa.generate-ddl=false

# jpa나 hibernate를 통해 CRUD를 실행하면 해당 CRUD의 SQL 로깅을 보여줄지에 대한 유무
spring.jpa.show-sql=true

# 사용하는 데이터베이스를 지정
spring.jpa.database=postgresql

# 사용하려는 데이터베이스에 맞는 Dialect 지정(hibernate가 각 데이터베이스에 맞게 SQL을 처리해주기 위해서)
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# 하이버네이트 전용 속성 : 로깅에 표시되는 SQL을 보기 좋게 바꿔주는 기능
spring.jpa.properties.hibernate.format_sql=true

# hibernate logging level 설정 -> info, debug가 있는데 debug가 좀 더 자세히 보여준다.
logging.level.org.hibernate.sql=info

# hibernate logging type 설정 -> trace로 설정 해놓으면 로깅에 ?에 해당하는 데이터를 따로 출력해준다.
logging.level.org.hibernate.type=trace

# 테이블, 컬럼명 생성 전략 1 (테이블이나 컬럼명을 명시하지 않을 때 논리명 적용) - default
spring.jpa.hibernate.naming.implicit-strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy

# 테이블, 컬럼명 생성 전략 2 (테이블이나 컬럼명을 명시하지 않을 때 물리명 적용) - default
spring.jpa.hibernate.naming.physical-strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy

