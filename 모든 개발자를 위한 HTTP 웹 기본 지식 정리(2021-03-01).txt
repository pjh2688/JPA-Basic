 1. HTTP API를 만들어보자.
   (1) 요구사항 - 회원 정보 관리 API를 만들어라.
     - 회원 목록 조회
     - 회원 조회
     - 회원 등록
     - 회원 수정
     - 회원 삭제

   (2) API URI 설계(URI : Uniform Resource Identifier)
    <초보 개발자>
     - 회원 목록 조회 => /read-member-list
     - 회원 조회 => /read-member-by-id
     - 회원 등록 => /create-member
     - 회원 수정 => /update-member
     - 회원 삭제 => /delete-member

   (3) API URI에 대한 고민
     - 리소스(Resource)의 의미는 뭘까?
      -> 회원을 등록하고 수정하고 조회하는건 리소스가 아니다.
         ex) 미네랄을 캐라 -> 미네랄이 리소스.
      -> 회원(Member)라는 개념 자체가 바로 리소스.

     - 리소스(Resource)를 어떻게 식별하는게 좋을까?
      -> 우선 회원을 등록하고 수정하고 조회하는 것을 모두 배제.
      -> 회원이라는 리소스만 식별하면 된다. 다시 말해 회원 리소스를 URI에 매핑시킨다.

   (4) API URI 설계(URI : Uniform Resource Identifier)
     - [회원] 목록 조회
     - [회원] 조회
     - [회원] 등록
     - [회원] 수정
     - [회원] 삭제
    => [회원]이 Resource

   (5) API URI 설계(리소스 식별 및 URI 계층 구조 활용)
     - 회원 목록 조회 => /members
     - 회원 조회 => /members/{id} -> 어떻게 구분하지?
     - 회원 등록 => /members/{id} -> 어떻게 구분하지?
     - 회원 수정 => /members/{id} -> 어떻게 구분하지?
     - 회원 삭제 => /members/{id} -> 어떻게 구분하지?
    => 참고 : 계층 구조상 상위를 컬렉션으로 보고 복수단어 사용을 권장.

   (6) 리소스와 행위를 분리 - 가장 중요한 것은 리소스를 식별하는 것!
     - URI는 리소스만 식별.
     - 리소스와 해당 리소스를 대상으로 하는 행위를 분리.
       -> 리소스 : 회원(member)
       -> 행위 : 조회, 등록, 수정, 삭제
     - 리소스는 명사, 행위는 동사
     - 그러면 행위(메서드)는 어떻게 구분할까?

 2. HTTP 메서드 1 - GET, POST.
    (1) HTTP 메서드 종류 - 주요 메소드.
      - GET : 리소스 조회.
      - POST : 요청 데이터 처리(주로 등록(insert)에 사용).
      - PUT : 리소스를 대체, 해당 리소스가 없으면 생성.
      - PATCH : 리소스 부분 변경.
      - DELETE : 리소스 삭제.

    (2) HTTP 메서드 종류 - 기타 메서드.
      - HEAD : GET과 동일하지만 메시지 부분을 제외하고, 상태 줄(status-line)과 헤더(HTTP header)만 반환.
      - OPTIONS : 대상 리소스에 대한 통신 기능 옵션(메서드)을 설명(주로 CORS에서 사용)
      - CONNECT : 대상 리소스 자원이 있는 곳으로 식별되는 서버에 대한 터널을 설정.
      - TRACE : 대상 리소스에 대한 경로를 따라 메시지 루프백 테스트를 수행.

     * 루프백(Loop Back Interface) : 통상적으로 디버깅을 목적으로 네트워크 상에서 자기 자신을 나타내는 인터페이스
     또는 그 주소를 말함.(localhost).

    (3) GET
      - 리소스 조회 or 요청.
      - 서버에 전달하고 싶은 데이터는 query(쿼리 파라미터, 쿼리 스트링)를 통해서 전달.
      - 메시지 바디를 사용해서 데이터를 전달할 수 있지만, 지원하지 않는 곳이 많아 권장하지 않음.

    (4) POST
      - 요청 데이터를 처리.
      - 메시지 바디를 통해 서버로 요청 데이터 전달.
      - 서버에서는 요청 데이터를 처리. -> 메시지 바디를 통해 들어온 데이터를 처리하는 모든 기능을 수행한다.
      - 주로 전달된 데이터로 신규 리소스 등록, 프로세스 처리에 사용.
      - 표준 스펙 : POST 메서드는 대상 리소스가 리소스의 고유한 의미 체계에 따라 요청에 포함 된 표현을 처리하도록 요청합니다.(해석하기 어려움)
      
      - POST가 사용되는 기능의 예
         ㄱ) HTML 양식에 입력된 필드와 같은 데이터 블록을 데이터 처리 프로세스에 제공
           예) HTML FORM 태그에 입력한 정보로 회원 가입, 주문 등에서 사용.

         ㄴ) 게시판, 뉴스 그룹, 메일링 리스트, 블로그 또는 유사한 기사 그룹에 메시지 게시
           예) 게시판 글쓰기, 댓글 달기.
   
         ㄷ) 서버가 아직 식별하지 않은 새 리소스 생성
           예) 신규 주문 생성, 신규 회원 생성 등.

         ㄹ) 기존 자원에 데이터 추가
           예) 한 문서 끝에 내용 추가하기

      * 참고 사항 : 이 리소스 URI에 POST 요청이 오면 요청 데이터를 어떻게 처리할지 리소스 마다 따로 정해야한다. -> 정해진 건 없음.
     
      * POST 요점 정리
       ㄱ) 새 리소스 생성(등록) 
         -> 서버가 아직 식별하지 않은 새 리소스를 생성.
         
       ㄴ) 요청 데이터 처리
         -> 단순히 데이터를 생성하거나, 변경하는 것을 넘어서 프로세스를 처리해야 하는 경우.
           ex) 주문에서 결제 완료 -> 배달 시작 -> 배달 완료 처럼 단순히 값 변경을 넘어서 프로세스의 상태가 변경되는 경우.
         -> POST의 결과로 새로운 리소스가 생성 되지 않을 수도 있음.
           ex) POST /orders/{orderId}/start-delivery (동사 형태의 URI == 컨트롤 URI)

       ㄷ) 다른 메서드로 처리하기 애매한 경우
         ex) JSON으로 조회 데이터를 넘겨야 하는데, GET 메서드를 사용하기 어려운 경우
          -> 애매하면 POST
      
 3. HTTP 메서드 2 - PUT, PATCH, DELETE.
    (1) PUT
     ㄱ) 리소스를 완전히 대체한다. 
       - 리소스가 있으면 대체(바꿔 치기 or 덮어쓰기). -> 기존 리소스를 삭제하고 새로운 리소스를 생성한다는 말.
       - 리소스가 없으면 생성.
  
     ㄴ) 중요! 클라이언트쪽에서 리소스를 식별.
       - 클라이언트가 리소스 위치(번호)를 알고 URI를 지정. POST는 리소스 위치를 알지 못함.
       - POST와 차이점

    (2) PATCH : 리소스를 부분 변경해준다. => PATCH가 없을 수도 있는데 그럴 경우 POST를 쓰면된다.(POST는 만능이다.)
   
    (3) DELETE : 리소스를 제거.
    
 4. HTTP 메서드의 속성. 
    (1) 안전(Safe Methods)
      - 호출하더라도 리소스를 변경하지 않는다.
       Q : 그래도 계속 호출해서 쓰다가 로그 같은게 많이 쌓여서 장애가 나면?
       A : 안전은 해당 리소스의 변화 유무만 고려한다. 그런 부분까지 고려하지 않는다.

    (2) 멱등(Idempotent Methods)
       - f(f(x)) = f(x)
       - 한 번 호출하든 두 번 호출하든 100번 호출하든 결과가 똑같다.
       - 멱등 메서드의 예
        ㄱ) GET : 한 번 조회하든, 두 번 조회하든 같은 결과가 조회된다.
        ㄴ) PUT : 결과를 대체한다. 따라서 같은 요청을 여러번 해도 최종 결과는 같다.
        ㄷ) DELETE : 결과를 삭제한다. 같은 요청을 여러번 해도 삭제된 결과는 똑같다.
        ㄹ) POST : POST는 멱등이 아니다.  예를 들어 결제의 경우 두 번 호출하면 같은 결제가 중복되어 발생할 수 있다.
       - 활용 예
         ex) 자동 복구 메커니즘, 서버가 TIMEOUT 등으로 정상 응답을 못주었을 때,  클라이언트가 같은 요청을 해도 되는지의 판단 근거가 된다.
       
       Q : 재요청 중간에 다른 곳에서 리소스를 변경해버리면?
        -> 사용자 1 : GET -> username : A, age : 20
        -> 사용자 2 : PUT -> username : A, age : 30
        -> 사용자 1 : GET -> username : A, age : 30 => 사용자 2에 의해 바뀐 데이터로 조회된다.

       A : 멱등은 외부 요인으로 중간에 리소스가 변경되는 것까지는 고려하지 않는다.
       
    (3) 캐시 가능(Cacheable Methods)
       - 응답 결과 리소스를 캐시해서 사용해도 되는가?
       - GET, HEAD, POST, PATCH는 캐시 가능
       - 실제로는 GET, HEAD 정도만 캐시로 사용.
       - POST, PATCH는 본문 내용까지 캐시 키로 고려해야 하는데, 구현이 쉽지 않아서 잘 사용하지 않는다.

     *캐시(Cache) 란? 
      -> 중앙 처리 장치의 성능 향상을 위해 사용하는 보조 기억 장치. 저용량, 고속의 반도체 기억 장치이다.